---
import Layout from '../layouts/Layout.astro';
import type { Patient } from '../types/PatientDTO';
import { fetchAllPatients } from '../data/mockPatients';
import { calculateNEWS2Total, getNews2Risk, getNEWS2Score } from '../utils/news2Calculator';

const patients = await fetchAllPatients();

const filterOptions = ['All', 'Critical', 'High', 'Medium'];
---

<style>
  .overview-container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 2.5em 1em 2em 1em;
  }
  .overview-title {
    font-size: 2.2em;
    font-weight: 800;
    color: #1d4ed8;
    margin-bottom: 0.7em;
    text-align: center;
    letter-spacing: 0.01em;
  }
  .patient-table {
    width: 100%;
    border-collapse: collapse;
    background: #fff;
    border-radius: 14px;
    box-shadow: 0 2px 16px #1e293b0a;
    overflow: hidden;
  }
  .patient-table th {
    background: #f8fafc;
    color: #1e293b;
    font-weight: 600;
    text-align: left;
    padding: 1em;
    border-bottom: 2px solid #e2e8f0;
  }
  .patient-table td {
    padding: 1em;
    border-bottom: 1px solid #e2e8f0;
    color: #1e293b;
  }
  .patient-table tr:last-child td {
    border-bottom: none;
  }
  .patient-table tr {
    cursor: pointer;
    transition: background-color 0.2s;
  }
  .patient-table tr:hover {
    background: #f1f5f9;
  }
  .patient-name {
    font-weight: 600;
    color: #1e293b;
  }
  .patient-age {
    color: #64748b;
    font-size: 0.95em;
  }
  .news2-score-badge {
    font-size: 1.1em;
    font-weight: 800;
    border-radius: 6px;
    padding: 0.3em 0.8em;
    color: #fff;
    display: inline-block;
  }
  .news2-score-badge.low { background: #22c55e; }
  .news2-score-badge.medium { background: #eab308; color: #1e293b; }
  .news2-score-badge.high { background: #f97316; }
  .news2-score-badge.critical { background: #ef4444; }

  .individual-score-badge {
    display: inline-block;
    min-width: 22px;
    padding: 0.18em 0.52em;
    border-radius: 4px;
    font-weight: 700;
    font-size: 1em;
    line-height: 1.5;
    text-align: center;
    background: none;
    border: none;
    box-shadow: none;
    transition: background 0.2s, color 0.2s;
}
.individual-score-badge.score-0 {
    background-color: #22c55e !important;
    color: #fff !important;
}
.individual-score-badge.score-1 {
    background-color: #fde68a !important;
    color: #92400e !important;
    border-color: #fde68a;
}
.individual-score-badge.score-2 {
    background-color: #fdba74 !important;
    color: #fff !important;
    border-color: #fdba74;
}
.individual-score-badge.score-3 {
    background-color: #ef4444 !important;
    color: #fff !important;
    border-color: #ef4444;
}

.news2-score-badge.low {
    background: #22c55e;
    color: #fff;
}
.news2-score-badge.medium {
    background: #fde68a;
    color: #92400e;
}
.news2-score-badge.high {
    background: #fdba74;
    color: #fff;
}
.news2-score-badge.critical {
    background: #ef4444;
    color: #fff;
}


    @keyframes flash-alert {
    0%, 100% { opacity: 1; filter: drop-shadow(0 0 0 #ef4444); }
    40% { opacity: 0.3; filter: drop-shadow(0 0 8px #fff176); }
    60% { opacity: 1; filter: drop-shadow(0 0 12px #ef4444); }
  }
  .alert-flash {
    font-size: 1.55em;
    color: #ef4444;
    animation: flash-alert 1s infinite;
    font-weight: bold;
    vertical-align: middle;
    filter: drop-shadow(0 0 2px #fff176);
  }

.filter-bar {
    display: flex;
    gap: 1em;
    justify-content: center;
    margin-bottom: 2em;
  }
  .filter-btn {
    background: #e0e7ef;
    color: #1d4ed8;
    font-weight: 600;
    border: none;
    border-radius: 8px;
    padding: 0.5em 1.5em;
    font-size: 1.08em;
    cursor: pointer;
    transition: background 0.2s, color 0.2s;
  }
  .filter-btn.active, .filter-btn:focus {
    background: #1d4ed8;
    color: #fff;
    outline: none;
  }
  .filter-btn:hover {
    background: #60a5fa;
    color: #fff;
  }
  @media (max-width: 700px) {
    .overview-container { 
      padding: 1.2em 0.2em; 
    }
    .patient-table {
      display: block;
      overflow-x: auto;
      white-space: nowrap;
    }
    .patient-table th,
    .patient-table td {
      padding: 0.8em;
    }
  }
</style>

<Layout>
  <div class="overview-container">
    <div class="overview-title">NEWS2 Patient Overview</div>
    <div style="text-align:center; margin-bottom: 0.2em;">
      <span style="font-size: 1em; color: #64748b; font-weight: 600; letter-spacing: 0.01em;">
        Filter by <span style="color: #1d4ed8;">Total NEWS2 Score</span>:
      </span>
    </div>
    <div class="filter-bar" id="filter-bar">
      {filterOptions.map(option => (
        <button type="button" class="filter-btn" data-filter={option}>{option}</button>
      ))}
    </div>
    <table class="patient-table" id="patient-list">
      <thead>
        <tr>
          <th>Patient</th>
          <th>Age</th>
          <th style="text-align:center;">Resp</th>
          <th style="text-align:center;">SpOâ‚‚</th>
          <th style="text-align:center;">Oâ‚‚</th>
          <th style="text-align:center;">BP</th>
          <th style="text-align:center;">Pulse</th>
          <th style="text-align:center;">Consc</th>
          <th style="text-align:center;">Temp</th>
          <th style="text-align:center; border-left: 1.5px solid #e5e7eb;">Total</th>
        </tr>
      </thead>
      <tbody>
        {patients.map((patient: Patient) => {
          const respScore = getNEWS2Score('Respiration rate', patient.respiratoryRate, patient);
          const spo2Score = getNEWS2Score('SpO2 Scale 1', patient.oxygenSaturation, patient);
          const o2Score = getNEWS2Score('Air or oxygen', patient.supplementalO2, patient);
          const bpScore = getNEWS2Score('Systolic BP', patient.systolicBP, patient);
          const pulseScore = getNEWS2Score('Pulse', patient.heartRate, patient);
          const conscScore = getNEWS2Score('Consciousness', patient.consciousness, patient);
          const tempScore = getNEWS2Score('Temperature', patient.temperature, patient);
          const score = calculateNEWS2Total(patient);
          const risk = getNews2Risk(score);
          let riskClass = 'low';
          if (risk.label === 'Medium risk') riskClass = 'medium';
          else if (risk.label === 'High risk') riskClass = 'high';
          else if (risk.label === 'Critical risk') riskClass = 'critical';
          return (
            <tr data-risk={risk.label.split(' ')[0]} onclick={`window.location.href='/patient/${patient.id}'`}>
              <td>
                <div class="patient-name">
                  {patient.name}
                  {(score > 5 || [respScore, spo2Score, o2Score, bpScore, pulseScore, conscScore, tempScore].some(s => s === 3)) ? (
                    <span class="alert-flash" title="Alert: High NEWS2 score" style="margin-left:0.35em;">ðŸš¨</span>
                  ) : ''}
                </div>
              </td>
              <td>
                <div class="patient-age">{patient.age}</div>
              </td>
              <td style="text-align:center;"><span class={`individual-score-badge score-${respScore}`}>{respScore}</span></td>
              <td style="text-align:center;"><span class={`individual-score-badge score-${spo2Score}`}>{spo2Score}</span></td>
              <td style="text-align:center;"><span class={`individual-score-badge score-${o2Score}`}>{o2Score}</span></td>
              <td style="text-align:center;"><span class={`individual-score-badge score-${bpScore}`}>{bpScore}</span></td>
              <td style="text-align:center;"><span class={`individual-score-badge score-${pulseScore}`}>{pulseScore}</span></td>
              <td style="text-align:center;"><span class={`individual-score-badge score-${conscScore}`}>{conscScore}</span></td>
              <td style="text-align:center;"><span class={`individual-score-badge score-${tempScore}`}>{tempScore}</span></td>
              <td style="text-align:center; border-left: 1.5px solid #e5e7eb;"><span class={`news2-score-badge ${riskClass}`}>{score}</span></td>
            </tr>
          );
        })}
      </tbody>
    </table>
  </div>
  <script type="module">
    const filterBar = document.getElementById('filter-bar');
    const patientList = document.getElementById('patient-list');
    if (filterBar && patientList) {
      filterBar.addEventListener('click', (e) => {
        if (e.target && e.target.matches('button[data-filter]')) {
          const selected = e.target.getAttribute('data-filter');
          // Set active class
          filterBar.querySelectorAll('button').forEach(btn => btn.classList.remove('active'));
          e.target.classList.add('active');
          // Show/hide patients
          patientList.querySelectorAll('tbody tr').forEach(row => {
            if (selected === 'All' || row.getAttribute('data-risk') === selected) {
              row.style.display = '';
            } else {
              row.style.display = 'none';
            }
          });
        }
      });
      // Set 'All' as active by default
      filterBar.querySelector('button[data-filter="All"]').classList.add('active');
    }
  </script>
</Layout> 